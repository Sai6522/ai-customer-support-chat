const fs = require('fs');
const path = require('path');

// Generate TXT format for chat download
const generateChatTXT = (conversation, user) => {
  const { title, messages, sessionId, createdAt } = conversation;
  
  let txtContent = '';
  
  // Header
  txtContent += '='.repeat(60) + '\n';
  txtContent += 'CHAT CONVERSATION EXPORT\n';
  txtContent += '='.repeat(60) + '\n\n';
  
  // Conversation details
  txtContent += `Title: ${title || 'Untitled Conversation'}\n`;
  txtContent += `User: ${user.username} (${user.email})\n`;
  txtContent += `Session ID: ${sessionId}\n`;
  txtContent += `Date: ${new Date(createdAt).toLocaleString()}\n`;
  txtContent += `Total Messages: ${messages.length}\n\n`;
  
  txtContent += '='.repeat(60) + '\n';
  txtContent += 'CONVERSATION HISTORY\n';
  txtContent += '='.repeat(60) + '\n\n';
  
  // Messages
  messages.forEach((message, index) => {
    const timestamp = new Date(message.timestamp).toLocaleString();
    const sender = message.sender === 'user' ? 'USER' : 'AI ASSISTANT';
    
    txtContent += `[${timestamp}] ${sender}:\n`;
    txtContent += `${message.content}\n`;
    
    // Add metadata for AI responses
    if (message.sender === 'bot' && message.metadata) {
      txtContent += `   (Response time: ${message.metadata.responseTime}ms`;
      if (message.metadata.model) {
        txtContent += `, Model: ${message.metadata.model}`;
      }
      if (message.metadata.tokens) {
        txtContent += `, Tokens: ${message.metadata.tokens}`;
      }
      txtContent += `)\n`;
    }
    
    txtContent += '\n' + '-'.repeat(40) + '\n\n';
  });
  
  // Footer
  txtContent += '='.repeat(60) + '\n';
  txtContent += 'END OF CONVERSATION\n';
  txtContent += `Exported on: ${new Date().toLocaleString()}\n`;
  txtContent += 'Generated by AI Customer Support Chat Platform\n';
  txtContent += '='.repeat(60) + '\n';
  
  return txtContent;
};

// Generate HTML content for PDF conversion
const generateChatHTML = (conversation, user) => {
  const { title, messages, sessionId, createdAt } = conversation;
  
  let htmlContent = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Chat Conversation - ${title || 'Untitled'}</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #fff;
        }
        .header {
            text-align: center;
            border-bottom: 3px solid #2196F3;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        .header h1 {
            color: #2196F3;
            margin: 0;
            font-size: 28px;
        }
        .header h2 {
            color: #666;
            margin: 10px 0 0 0;
            font-size: 18px;
            font-weight: normal;
        }
        .conversation-info {
            background-color: #f5f5f5;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 30px;
            border-left: 4px solid #2196F3;
        }
        .conversation-info h3 {
            margin: 0 0 10px 0;
            color: #2196F3;
        }
        .info-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
        }
        .info-item {
            display: flex;
        }
        .info-label {
            font-weight: bold;
            margin-right: 10px;
            min-width: 80px;
        }
        .message {
            margin-bottom: 20px;
            padding: 15px;
            border-radius: 12px;
            position: relative;
        }
        .message.user {
            background-color: #E3F2FD;
            border-left: 4px solid #2196F3;
            margin-left: 0;
            margin-right: 50px;
        }
        .message.bot {
            background-color: #F5F5F5;
            border-left: 4px solid #4CAF50;
            margin-left: 50px;
            margin-right: 0;
        }
        .message-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }
        .sender {
            font-weight: bold;
            font-size: 14px;
        }
        .sender.user {
            color: #1976D2;
        }
        .sender.bot {
            color: #388E3C;
        }
        .timestamp {
            font-size: 12px;
            color: #666;
        }
        .message-content {
            white-space: pre-wrap;
            word-wrap: break-word;
            line-height: 1.5;
        }
        .metadata {
            font-size: 11px;
            color: #888;
            margin-top: 8px;
            font-style: italic;
        }
        .footer {
            text-align: center;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 2px solid #eee;
            color: #666;
            font-size: 12px;
        }
        .page-break {
            page-break-before: always;
        }
        @media print {
            body {
                margin: 0;
                padding: 15px;
            }
            .message {
                break-inside: avoid;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Chat Conversation Export</h1>
        <h2>${title || 'Untitled Conversation'}</h2>
    </div>
    
    <div class="conversation-info">
        <h3>Conversation Details</h3>
        <div class="info-grid">
            <div class="info-item">
                <span class="info-label">User:</span>
                <span>${user.username} (${user.email})</span>
            </div>
            <div class="info-item">
                <span class="info-label">Session:</span>
                <span>${sessionId}</span>
            </div>
            <div class="info-item">
                <span class="info-label">Date:</span>
                <span>${new Date(createdAt).toLocaleString()}</span>
            </div>
            <div class="info-item">
                <span class="info-label">Messages:</span>
                <span>${messages.length} total</span>
            </div>
        </div>
    </div>
`;

  // Add messages
  messages.forEach((message, index) => {
    const timestamp = new Date(message.timestamp).toLocaleString();
    const senderClass = message.sender === 'user' ? 'user' : 'bot';
    const senderName = message.sender === 'user' ? 'USER' : 'AI ASSISTANT';
    
    htmlContent += `
    <div class="message ${senderClass}">
        <div class="message-header">
            <span class="sender ${senderClass}">${senderName}</span>
            <span class="timestamp">${timestamp}</span>
        </div>
        <div class="message-content">${message.content}</div>`;
    
    // Add metadata for AI responses
    if (message.sender === 'bot' && message.metadata) {
      let metadataText = `Response time: ${message.metadata.responseTime}ms`;
      if (message.metadata.model) {
        metadataText += ` • Model: ${message.metadata.model}`;
      }
      if (message.metadata.tokens) {
        metadataText += ` • Tokens: ${message.metadata.tokens}`;
      }
      
      htmlContent += `<div class="metadata">${metadataText}</div>`;
    }
    
    htmlContent += `</div>`;
  });
  
  // Footer
  htmlContent += `
    <div class="footer">
        <p>Exported on: ${new Date().toLocaleString()}</p>
        <p>Generated by AI Customer Support Chat Platform</p>
    </div>
</body>
</html>`;
  
  return htmlContent;
};

// Save chat as TXT file
const saveChatAsTXT = async (conversation, user, outputDir = './downloads') => {
  try {
    // Ensure output directory exists
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    const txtContent = generateChatTXT(conversation, user);
    const fileName = `chat_${conversation.sessionId}_${Date.now()}.txt`;
    const filePath = path.join(outputDir, fileName);
    
    fs.writeFileSync(filePath, txtContent, 'utf8');
    
    return {
      success: true,
      filePath,
      fileName,
      size: Buffer.byteLength(txtContent, 'utf8'),
    };
  } catch (error) {
    console.error('Error saving chat as TXT:', error);
    return {
      success: false,
      error: 'Failed to generate TXT file',
    };
  }
};

// Save chat as HTML (for PDF conversion on frontend)
const saveChatAsHTML = async (conversation, user, outputDir = './downloads') => {
  try {
    // Ensure output directory exists
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    const htmlContent = generateChatHTML(conversation, user);
    const fileName = `chat_${conversation.sessionId}_${Date.now()}.html`;
    const filePath = path.join(outputDir, fileName);
    
    fs.writeFileSync(filePath, htmlContent, 'utf8');
    
    return {
      success: true,
      filePath,
      fileName,
      htmlContent,
      size: Buffer.byteLength(htmlContent, 'utf8'),
    };
  } catch (error) {
    console.error('Error saving chat as HTML:', error);
    return {
      success: false,
      error: 'Failed to generate HTML file',
    };
  }
};

module.exports = {
  generateChatTXT,
  generateChatHTML,
  saveChatAsTXT,
  saveChatAsHTML,
};
